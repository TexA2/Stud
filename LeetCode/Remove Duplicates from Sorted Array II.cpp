/*
Учитывая, что номера целочисленного массива отсортированы в порядке возрастания,
удалите некоторые дубликаты на месте таким образом, чтобы каждый уникальный элемент появлялся не более двух раз.
Относительный порядок элементов должен быть сохранен прежним.

Поскольку в некоторых языках изменить длину массива невозможно,
вместо этого вы должны поместить результат в первую часть массива nums.
Более формально, если после удаления дубликатов осталось k элементов,
то первые k элементов nums должны содержать конечный результат.
Не имеет значения, что вы оставляете за пределами первых k элементов.

Возвращает k после помещения конечного результата в первые k ячеек nums.

Не выделяйте дополнительное пространство для другого массива.
Вы должны сделать это, изменив входной массив на месте с помощью O(1) дополнительной памяти


Пример 1:
Input: nums = [1, 1, 1, 2, 2, 3]
Output : 5, nums = [1, 1, 2, 2, 3, _]
Пояснение : Ваша функция должна возвращать k = 5, причем первые пять элементов nums равны 1, 1, 2, 2 и 3 соответственно.
Не имеет значения, что вы оставляете за пределами возвращаемого k(следовательно, это символы подчеркивания).

Пример 2 :
Input : nums = [0, 0, 1, 1, 1, 1, 2, 3, 3]
Output : 7, nums = [0, 0, 1, 1, 2, 3, 3, _, _]
Пояснение : Ваша функция должна возвращать k = 7, причем первые семь элементов nums являются 0, 0, 1, 1, 2, 3 и 3 соответственно.
Не имеет значения, что вы оставляете за пределами возвращаемого k(следовательно, это символы подчеркивания).
*/

#include <iostream>
#include <vector>

using namespace std;


class Solution {
public:
    int removeDuplicates(vector<int>& nums);
};


int Solution::removeDuplicates(vector<int>& nums)
{
    int count = 0;  // кол-во пар
    int j = 1;
    int i = 1;

    int pair{};
    for (; i <= nums.size()- j ;)
    {
        if (nums[i] != nums[i - 1])
        {
            pair = 0;              // сбрасываем счетчик
            ++i;
            continue;

        }
        ++pair;

        if (pair > 1)
        {
            int temp{ nums[i] };
            int size = nums.size() - i;
            for (int k = 0; k < size - 1; ++k)
                nums[i + k] = nums[i + k + 1];

            nums[nums.size()-1] = temp;
            j++;
            continue;
        }

        ++i;
    }

   
    cout << i << endl;
        for (int x : nums)
            cout << x << " ";
        cout << endl;
        cout << pair << endl;


      //  if (nums.size() < 2)
        //    return i;

       // if (pair >= 1 && nums.size() <= 3)
         //   return i;

        return i;
}





int main() {

    vector<int> nums{ 1,1,1};
    Solution x;

   cout << "EEEEE: " << x.removeDuplicates(nums);



    return 0;
}